// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Unternehmen/Mandant
model Company {
  id           String @id @default(cuid())
  name         String
  taxNumber    String?
  address      String?
  city         String?
  zipCode      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  invoices     Invoice[]
  bookings     Booking[]
  
  @@map("companies")
}

// Eingangsrechnungen
model Invoice {
  id              String @id @default(cuid())
  filename        String
  originalName    String
  filePath        String
  fileSize        Int
  mimeType        String
  
  // Extrahierte Daten
  supplierName    String?
  supplierTaxId   String?
  invoiceNumber   String?
  invoiceDate     DateTime?
  dueDate         DateTime?
  totalAmount     Float?
  netAmount       Float?
  vatAmount       Float?
  vatRate         Float?
  
  // OCR und Verarbeitung
  ocrText         String?
  processed       Boolean @default(false)
  processingError String?
  
  // Kontierung
  booked          Boolean @default(false)
  skr03Account    String?
  bookingText     String?
  
  companyId       String
  company         Company @relation(fields: [companyId], references: [id])
  
  creditorId      String?
  creditor        Creditor? @relation(fields: [creditorId], references: [id])
  
  bookings        Booking[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("invoices")
}

// Buchungen
model Booking {
  id              String @id @default(cuid())
  bookingDate     DateTime
  bookingText     String
  debitAccount    String  // SKR03 Sollkonto
  creditAccount   String  // SKR03 Habenkonto
  amount          Float
  vatRate         Float?
  
  invoiceId       String?
  invoice         Invoice? @relation(fields: [invoiceId], references: [id])
  
  companyId       String
  company         Company @relation(fields: [companyId], references: [id])
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("bookings")
}

// SKR03 Kontenrahmen
model SKR03Account {
  id          String @id @default(cuid())
  accountCode String @unique
  accountName String
  accountType String // Aktiva, Passiva, Aufwand, Ertrag
  category    String // Detailkategorie
  isActive    Boolean @default(true)
  
  // Zusätzliche Felder für erweiterte Kontierung
  keywords    String? // Komma-getrennte Keywords für automatische Zuordnung
  parentCode  String? // Übergeordnetes Konto (für Hierarchie)
  isCreditor  Boolean @default(false) // Ist dies ein Kreditorenkonto?
  isDebitor   Boolean @default(false) // Ist dies ein Debitorenkonto?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("skr03_accounts")
}

// Hochgeladene Dateien
model UploadedFile {
  id            String @id @default(cuid())
  filename      String
  originalName  String
  mimeType      String
  size          Int
  path          String
  extractedText String?
  status        String @default("processing") // processing, completed, error
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("uploaded_files")
}

// Kreditoren/Lieferanten
model Creditor {
  id              String @id @default(cuid())
  name            String
  ustId           String? @unique // USt-IdNr
  iban            String?
  address         String?
  city            String?
  zipCode         String?
  country         String?
  
  // Kontierung
  defaultAccount  String? // Standard-Sachkonto für diesen Kreditor
  creditorAccount String? // Kreditorenkonto (aus Kontenplan.csv)
  paymentTerms    Int? // Zahlungsziel in Tagen
  
  // Erweiterte Daten aus Kontenplan.csv
  accountCode     String? // Kontonummer falls direkter Eintrag im Kontenplan
  isFromKontenplan Boolean @default(false) // Stammt aus Kontenplan.csv
  
  // Metadaten
  isActive        Boolean @default(true)
  notes           String?
  
  // Templates und Verarbeitungslogik
  preferredTemplate String? // FAMO, SONEPAR, etc.
  keywords        String? // Komma-getrennte Keywords für Erkennung
  
  // Beziehungen
  invoices        Invoice[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("creditors")
}
